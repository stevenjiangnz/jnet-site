version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3110:3110"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
      - /app/.turbo
    environment:
      - NODE_ENV=development
      - API_BASE_URL=http://localhost:8000
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
    depends_on:
      - api-service

  stock-data-service:
    build:
      context: ./services/stock-data-service
      dockerfile: Dockerfile.dev
    ports:
      - "9001:9000"
    volumes:
      - ./services/stock-data-service:/app
      - stock-data-downloads:/app/data/downloads
      - stock-data-uv-cache:/uv-cache
      - ./services/stock-data-service/credentials:/app/credentials:ro
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - DATA_DIRECTORY=/app/data/downloads
      - UV_CACHE_DIR=/uv-cache
      - UV_PROJECT_ENVIRONMENT=/opt/venv
      - PYTHONUNBUFFERED=1
      - GCS_BUCKET_NAME=${GCS_BUCKET_NAME:-jnet-stock-data-dev}
      - GCS_PROJECT_ID=${GCS_PROJECT_ID}
      - GCS_CREDENTIALS_PATH=/app/credentials/gcs-service-account.json
      - UPSTASH_REDIS_URL=${UPSTASH_REDIS_URL}
      - UPSTASH_REDIS_TOKEN=${UPSTASH_REDIS_TOKEN}
      - CACHE_ENABLED=${CACHE_ENABLED:-true}
    networks:
      - default
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  api-service:
    build:
      context: ./services/api-service
      dockerfile: Dockerfile.dev
    ports:
      - "8002:8002"
      - "8888:8888"  # Jupyter port
    volumes:
      - ./services/api-service:/app
      - api-service-jupyter:/app/notebooks
      - api-service-uv-cache:/uv-cache
      - ./services/api-service/credentials:/app/credentials:ro
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - API_KEY=dev-api-key
      - STOCK_DATA_SERVICE_URL=http://stock-data-service:9000
      - UV_CACHE_DIR=/uv-cache
      - UV_PROJECT_ENVIRONMENT=/opt/venv
      - PYTHONUNBUFFERED=1
      - JUPYTER_ENABLE=true
      - GCS_BUCKET_NAME=${GCS_BUCKET_NAME:-jnet-api-service}
      - GCS_PROJECT_ID=${GCS_PROJECT_ID}
      - GCS_CREDENTIALS_PATH=/app/credentials/gcs-service-account.json
      - UPSTASH_REDIS_URL=${UPSTASH_REDIS_URL}
      - UPSTASH_REDIS_TOKEN=${UPSTASH_REDIS_TOKEN}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
    depends_on:
      - stock-data-service
    networks:
      - default
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=jnetsolution
      - POSTGRES_USER=dev
      - POSTGRES_PASSWORD=devpass
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
  stock-data-downloads:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/services/stock-data-service/data/downloads
      o: bind
  stock-data-uv-cache:
    driver: local
  api-service-jupyter:
    driver: local
  api-service-uv-cache:
    driver: local