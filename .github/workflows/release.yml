name: Release and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
      - '.github/workflows/ci.yml'

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME || 'stevenjiangnz' }}  # Fallback to your username if not set
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      auth-service-changed: ${{ steps.changes.outputs.auth-service }}
      user-service-changed: ${{ steps.changes.outputs.user-service }}
      content-service-changed: ${{ steps.changes.outputs.content-service }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          frontend:
            - 'frontend/**'
          auth-service:
            - 'services/auth-service/**'
          user-service:
            - 'services/user-service/**'
          content-service:
            - 'services/content-service/**'

  bump-versions:
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.frontend-changed == 'true' ||
      needs.detect-changes.outputs.auth-service-changed == 'true' ||
      needs.detect-changes.outputs.user-service-changed == 'true' ||
      needs.detect-changes.outputs.content-service-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      frontend-version: ${{ steps.frontend_version.outputs.version }}
      auth-service-version: ${{ steps.auth_service.outputs.version }}
      user-service-version: ${{ steps.user_version.outputs.version }}
      content-service-version: ${{ steps.content_version.outputs.version }}
      frontend-changed: ${{ needs.detect-changes.outputs.frontend-changed }}
      auth-service-changed: ${{ needs.detect-changes.outputs.auth-service-changed }}
      user-service-changed: ${{ needs.detect-changes.outputs.user-service-changed }}
      content-service-changed: ${{ needs.detect-changes.outputs.content-service-changed }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Fetch all tags
      run: git fetch --tags
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Get commit message
      id: commit
      run: |
        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
        echo "message<<$EOF" >> $GITHUB_OUTPUT
        git log -1 --pretty=%B >> $GITHUB_OUTPUT
        echo "$EOF" >> $GITHUB_OUTPUT
      
    # Bump frontend version
    - name: Bump frontend version
      if: needs.detect-changes.outputs.frontend-changed == 'true'
      run: |
        node .github/scripts/bump-version.js frontend "${{ steps.commit.outputs.message }}"
        
    - name: Read frontend version
      id: frontend_version
      if: needs.detect-changes.outputs.frontend-changed == 'true'
      run: |
        VERSION=$(jq -r .version frontend/package.json)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    # Bump auth-service version
    - name: Bump auth-service version
      if: needs.detect-changes.outputs.auth-service-changed == 'true'
      run: |
        node .github/scripts/bump-version.js auth-service "${{ steps.commit.outputs.message }}"
        
    - name: Read auth-service version
      id: auth_version
      if: needs.detect-changes.outputs.auth-service-changed == 'true'
      run: |
        VERSION=$(jq -r .version services/auth-service/version.json)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    # Bump user-service version
    - name: Bump user-service version
      if: needs.detect-changes.outputs.user-service-changed == 'true'
      run: |
        node .github/scripts/bump-version.js user-service "${{ steps.commit.outputs.message }}"
        
    - name: Read user-service version
      id: user_version
      if: needs.detect-changes.outputs.user-service-changed == 'true'
      run: |
        VERSION=$(jq -r .version services/user-service/version.json)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    # Bump content-service version
    - name: Bump content-service version
      if: needs.detect-changes.outputs.content-service-changed == 'true'
      run: |
        node .github/scripts/bump-version.js content-service "${{ steps.commit.outputs.message }}"
        
    - name: Read content-service version
      id: content_version
      if: needs.detect-changes.outputs.content-service-changed == 'true'
      run: |
        VERSION=$(jq -r .version services/content-service/package.json)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    # Commit all version bumps
    - name: Commit version bumps
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        COMMIT_MSG="chore: bump versions"
        if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
          git add frontend/package.json
          COMMIT_MSG="$COMMIT_MSG - frontend: ${{ steps.frontend_version.outputs.version }}"
        fi
        if [[ "${{ needs.detect-changes.outputs.auth-service-changed }}" == "true" ]]; then
          git add services/auth-service/version.json
          COMMIT_MSG="$COMMIT_MSG - auth-service: ${{ steps.auth_version.outputs.version }}"
        fi
        if [[ "${{ needs.detect-changes.outputs.user-service-changed }}" == "true" ]]; then
          git add services/user-service/version.json
          COMMIT_MSG="$COMMIT_MSG - user-service: ${{ steps.user_version.outputs.version }}"
        fi
        if [[ "${{ needs.detect-changes.outputs.content-service-changed }}" == "true" ]]; then
          git add services/content-service/package.json
          COMMIT_MSG="$COMMIT_MSG - content-service: ${{ steps.content_version.outputs.version }}"
        fi
        
        if git diff --cached --quiet; then
          echo "No version changes to commit"
        else
          git commit -m "$COMMIT_MSG"
        fi
        
    - name: Push version bumps
      run: |
        git push origin main

  release-and-deploy:
    needs: bump-versions
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    strategy:
      matrix:
        service: [frontend, auth-service, user-service, content-service]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: main
        
    - name: Check if service changed
      id: check
      run: |
        if [[ "${{ matrix.service }}" == "frontend" && "${{ needs.bump-versions.outputs.frontend-changed }}" == "true" ]]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "version=${{ needs.bump-versions.outputs.frontend-version }}" >> $GITHUB_OUTPUT
        elif [[ "${{ matrix.service }}" == "auth-service" && "${{ needs.bump-versions.outputs.auth-service-changed }}" == "true" ]]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "version=${{ needs.bump-versions.outputs.auth-service-version }}" >> $GITHUB_OUTPUT
        elif [[ "${{ matrix.service }}" == "user-service" && "${{ needs.bump-versions.outputs.user-service-changed }}" == "true" ]]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "version=${{ needs.bump-versions.outputs.user-service-version }}" >> $GITHUB_OUTPUT
        elif [[ "${{ matrix.service }}" == "content-service" && "${{ needs.bump-versions.outputs.content-service-changed }}" == "true" ]]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "version=${{ needs.bump-versions.outputs.content-service-version }}" >> $GITHUB_OUTPUT
        else
          echo "should_run=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create service tag
      if: steps.check.outputs.should_run == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        TAG_NAME="${{ matrix.service }}-v${{ steps.check.outputs.version }}"
        if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
          echo "Tag $TAG_NAME already exists, skipping tag creation"
        else
          git tag -a "$TAG_NAME" -m "${{ matrix.service }} Release v${{ steps.check.outputs.version }}"
          git push origin "$TAG_NAME"
        fi
        
    - name: Set up Docker Buildx
      if: steps.check.outputs.should_run == 'true'
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      if: steps.check.outputs.should_run == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: Build and push Docker image
      if: steps.check.outputs.should_run == 'true'
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service == 'frontend' && './frontend' || format('./services/{0}', matrix.service) }}
        file: ${{ matrix.service == 'frontend' && './frontend/Dockerfile' || format('./services/{0}/Dockerfile', matrix.service) }}
        push: true
        tags: |
          ${{ env.DOCKER_USERNAME }}/jnet-${{ matrix.service }}:${{ steps.check.outputs.version }}
          ${{ env.DOCKER_USERNAME }}/jnet-${{ matrix.service }}:latest
          ${{ env.DOCKER_USERNAME }}/jnet-${{ matrix.service }}:sha-${{ github.sha }}
        cache-from: type=registry,ref=${{ env.DOCKER_USERNAME }}/jnet-${{ matrix.service }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKER_USERNAME }}/jnet-${{ matrix.service }}:buildcache,mode=max
        
    - name: Authenticate to Google Cloud
      if: steps.check.outputs.should_run == 'true'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      if: steps.check.outputs.should_run == 'true'
      uses: google-github-actions/setup-gcloud@v2
        
    - name: Deploy to Cloud Run
      if: steps.check.outputs.should_run == 'true'
      run: |
        gcloud run deploy ${{ matrix.service }} \
          --image docker.io/${{ env.DOCKER_USERNAME }}/jnet-${{ matrix.service }}:${{ steps.check.outputs.version }} \
          --region us-central1 \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars="VERSION=${{ steps.check.outputs.version }}"
          
    - name: Generate changelog
      if: steps.check.outputs.should_run == 'true'
      id: changelog
      run: |
        PREV_TAG=$(git describe --tags --abbrev=0 --match="${{ matrix.service }}-v*" HEAD^ 2>/dev/null || echo "")
        CHANGELOG=$(GCP_PROJECT_ID=${GCP_PROJECT_ID} node .github/scripts/generate-changelog.js ${{ matrix.service }} "${{ steps.check.outputs.version }}" "$PREV_TAG")
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        echo "$CHANGELOG" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
    - name: Create GitHub Release
      if: steps.check.outputs.should_run == 'true'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ matrix.service }}-v${{ steps.check.outputs.version }}
        name: ${{ matrix.service }} v${{ steps.check.outputs.version }}
        body: ${{ env.CHANGELOG }}
        draft: false
        prerelease: false