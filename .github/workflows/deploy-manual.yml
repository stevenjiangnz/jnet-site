name: Manual Deploy to Cloud Run

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy'
        required: true
        type: choice
        options:
          - frontend
          - auth-service
          - user-service
          - content-service
          - all
      version:
        description: 'Version tag to deploy (leave empty for latest)'
        required: false
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production
        default: staging

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME || 'stevenjiangnz' }}  # Fallback to your username if not set
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  deploy:
    runs-on: [self-hosted, macOS, mac]
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Enable required Google Cloud APIs
      run: |
        gcloud services enable run.googleapis.com --project=${{ secrets.GCP_PROJECT_ID }}
        gcloud services enable containerregistry.googleapis.com --project=${{ secrets.GCP_PROJECT_ID }}
        gcloud services enable cloudbuild.googleapis.com --project=${{ secrets.GCP_PROJECT_ID }}
        echo "APIs enabled. Waiting for propagation..."
        sleep 10
      
    - name: Set environment suffix
      id: env
      run: |
        if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
          echo "suffix=" >> $GITHUB_OUTPUT
          echo "ENV_NAME=production" >> $GITHUB_OUTPUT
        else
          echo "suffix=-staging" >> $GITHUB_OUTPUT
          echo "ENV_NAME=staging" >> $GITHUB_OUTPUT
        fi
        
    - name: Deploy Frontend
      if: github.event.inputs.service == 'frontend' || github.event.inputs.service == 'all'
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ -z "$VERSION" ]]; then
          VERSION="latest"
        fi
        
        gcloud run deploy frontend${{ steps.env.outputs.suffix }} \
          --image docker.io/${DOCKER_USERNAME}/jnet-frontend:${VERSION} \
          --region us-central1 \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars="NODE_ENV=${{ steps.env.outputs.ENV_NAME }},VERSION=${VERSION}"
          
    - name: Deploy Auth Service
      if: github.event.inputs.service == 'auth-service' || github.event.inputs.service == 'all'
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ -z "$VERSION" ]]; then
          VERSION="latest"
        fi
        
        gcloud run deploy auth-service${{ steps.env.outputs.suffix }} \
          --image docker.io/${DOCKER_USERNAME}/jnet-auth-service:${VERSION} \
          --region us-central1 \
          --platform managed \
          --no-allow-unauthenticated \
          --set-env-vars="ASPNETCORE_ENVIRONMENT=${{ steps.env.outputs.ENV_NAME }},VERSION=${VERSION}"
          
    - name: Deploy User Service
      if: github.event.inputs.service == 'user-service' || github.event.inputs.service == 'all'
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ -z "$VERSION" ]]; then
          VERSION="latest"
        fi
        
        gcloud run deploy user-service${{ steps.env.outputs.suffix }} \
          --image docker.io/${DOCKER_USERNAME}/jnet-user-service:${VERSION} \
          --region us-central1 \
          --platform managed \
          --no-allow-unauthenticated \
          --set-env-vars="ENVIRONMENT=${{ steps.env.outputs.ENV_NAME }},VERSION=${VERSION}"
          
    - name: Deploy Content Service
      if: github.event.inputs.service == 'content-service' || github.event.inputs.service == 'all'
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ -z "$VERSION" ]]; then
          VERSION="latest"
        fi
        
        gcloud run deploy content-service${{ steps.env.outputs.suffix }} \
          --image docker.io/${DOCKER_USERNAME}/jnet-content-service:${VERSION} \
          --region us-central1 \
          --platform managed \
          --no-allow-unauthenticated \
          --set-env-vars="NODE_ENV=${{ steps.env.outputs.ENV_NAME }},VERSION=${VERSION}"