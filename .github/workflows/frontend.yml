name: Frontend CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'

permissions:
  contents: write

env:
  SERVICE_NAME: frontend
  SERVICE_PATH: ./frontend
  IMAGE_NAME: jnet-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check Node.js version
        run: |
          echo "Using Node.js version:"
          node --version
          echo "Using npm version:"
          npm --version

      - name: Clean workspace
        working-directory: ${{ env.SERVICE_PATH }}
        run: |
          rm -rf node_modules .next
          npm cache clean --force

      - name: Install dependencies
        working-directory: ${{ env.SERVICE_PATH }}
        run: npm ci

      - name: Run linter
        working-directory: ${{ env.SERVICE_PATH }}
        run: npm run lint

      - name: Build application
        working-directory: ${{ env.SERVICE_PATH }}
        run: npm run build

  version:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: test
    outputs:
      semVer: ${{ steps.versioning.outputs.new-version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Git Version
        id: version
        uses: codacy/git-version@2.7.1
        with:
          prefix: frontend-v
          release-branch: main

      - name: Print Version
        id: versioning
        run: |
          echo "Version: ${{ steps.version.outputs.version }}"
          VERSION_NUMBER=$(echo ${{ steps.version.outputs.version }} | sed 's/^frontend-v//')
          echo "Version Number: $VERSION_NUMBER"
          echo "new-version=$VERSION_NUMBER" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Frontend Release ${{ steps.version.outputs.version }}
          body: |
            Frontend Service Release ${{ steps.version.outputs.version }}
            
            Docker image: `${{ secrets.DOCKER_USERNAME || 'stevenjiangnz' }}/${{ env.IMAGE_NAME }}:${{ steps.versioning.outputs.new-version }}`
            
            ## What's Changed
            See commit history for changes included in this release.
          draft: false
          prerelease: false

  build-and-push:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: version
    env:
      SEMVER: ${{ needs.version.outputs.semVer }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME || 'stevenjiangnz' }}" --password-stdin

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.SERVICE_PATH }}
          file: ${{ env.SERVICE_PATH }}/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME || 'stevenjiangnz' }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.DOCKER_USERNAME || 'stevenjiangnz' }}/${{ env.IMAGE_NAME }}:${{ env.SEMVER }}
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-production:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [version, build-and-push]
    environment:
      name: production
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        
      - name: Deploy Frontend to Cloud Run
        run: |
          gcloud run deploy frontend \
            --image docker.io/${{ secrets.DOCKER_USERNAME || 'stevenjiangnz' }}/${{ env.IMAGE_NAME }}:${{ needs.version.outputs.semVer }} \
            --region us-central1 \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=production,VERSION=${{ needs.version.outputs.semVer }},NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }},NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }},API_BASE_URL=${{ secrets.API_SERVICE_URL }},API_KEY=${{ secrets.API_SERVICE_KEY }}"
            
      - name: Get Service URL
        run: |
          SERVICE_URL=$(gcloud run services describe frontend \
            --region us-central1 \
            --format 'value(status.url)')
          echo "Frontend deployed to: $SERVICE_URL"
          echo "### Deployment Complete! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "Frontend service deployed to: $SERVICE_URL" >> $GITHUB_STEP_SUMMARY
          echo "Version: ${{ needs.version.outputs.semVer }}" >> $GITHUB_STEP_SUMMARY

  build-develop:
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME || 'stevenjiangnz' }}" --password-stdin

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.SERVICE_PATH }}
          file: ${{ env.SERVICE_PATH }}/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME || 'stevenjiangnz' }}/${{ env.IMAGE_NAME }}:develop
            ${{ secrets.DOCKER_USERNAME || 'stevenjiangnz' }}/${{ env.IMAGE_NAME }}:develop-${{ github.sha }}
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          cache-from: type=gha
          cache-to: type=gha,mode=max